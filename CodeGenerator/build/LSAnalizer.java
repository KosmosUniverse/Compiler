/* Generated By:JavaCC: Do not edit this line. LSAnalizer.java */
public class LSAnalizer implements LSAnalizerConstants {
  public static void main(String args[]) throws ParseException {
    LSAnalizer tokens;
    if (args.length == 0) {
      System.out.println("Reading from standard input ...");
      tokens = new LSAnalizer(System.in);
    } else if (args.length == 1) {
      System.out.println("Reading from file " + args[0] + " ...");
      try {
        tokens = new LSAnalizer(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File " + args[0] + " not found.");
        return ;
      }
    } else {
      System.out.println("Usage:");
      System.out.println("\u0009- java LSAnalizer < inputFile");
      System.out.println("\u0009- java LSAnalizer inputFile");
      return ;
    }
    try {
      tokens.start();
      System.out.println("Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println("Encountered error during parse.");
      System.out.println(e);
    }
  }

  static final public void start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case CONST:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      decl_list();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
    case VOID:
      function_list();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    main();
    jj_consume_token(0);
                                                 System.out.println("Program");
  }

  static final public void decl_list() throws ParseException {
    decl();
    jj_consume_token(SEMICOLON);
                      System.out.println("decl_list");
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      var_decl();
             System.out.println("decl -> var_decl");
      break;
    case CONST:
      const_decl();
                 System.out.println("decl -> const_decl");
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_decl() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(TPOINT);
    type();
                                    System.out.println("var_decl");
  }

  static final public void const_decl() throws ParseException {
    jj_consume_token(CONST);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(TPOINT);
    type();
    jj_consume_token(ASSIGN);
    expression();
                                                          System.out.println("const_decl");
  }

  static final public void function_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
      function();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case VOID:
        function_list();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
                                System.out.println("function_list -> function");
      break;
    case VOID:
      function_void();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case VOID:
        function_list();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
                                       System.out.println("function_list -> function_void");
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void function() throws ParseException {
    type();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPARENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      parameter_list();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RPARENT);
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case CONST:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      decl_list();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SQIP:
      case LBRACE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      statement_block();
    }
    jj_consume_token(RETURN);
    jj_consume_token(LPARENT);
    expression();
    jj_consume_token(RPARENT);
    jj_consume_token(SEMICOLON);
    jj_consume_token(RBRACE);
                                                                                                                                                              System.out.println("function");
  }

  static final public void function_void() throws ParseException {
                        Token t;
    jj_consume_token(VOID);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPARENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      parameter_list();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(RPARENT);
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case CONST:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      decl_list();
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SQIP:
      case LBRACE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      statement_block();
    }
    jj_consume_token(RETURN);
    jj_consume_token(LPARENT);
    jj_consume_token(RPARENT);
    jj_consume_token(SEMICOLON);
    jj_consume_token(RBRACE);
                                                                                                                                                    System.out.println("function_void -> identifier = " + t.image);
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
            System.out.println("Type -> integer");
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
              System.out.println("Type -> boolean");
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void parameter_list() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(TPOINT);
    type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      parameter_list();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
                                                       System.out.println("parameter_list");
  }

  static final public void main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(LBRACE);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case CONST:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      decl_list();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SQIP:
      case LBRACE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      statement_block();
    }
    jj_consume_token(RBRACE);
                                                             System.out.println("main");
  }

  static final public void statement_block() throws ParseException {
                          Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      statement_elem();
                                   System.out.println("statement_block -> identifier = " + t.image);
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      statement_block();
      jj_consume_token(RBRACE);
                                        System.out.println("statement_block -> stm_blk");
      break;
    case IF:
      jj_consume_token(IF);
      condition();
      jj_consume_token(LBRACE);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case SQIP:
        case LBRACE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
        statement_block();
      }
      jj_consume_token(RBRACE);
      jj_consume_token(ELSE);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SQIP:
      case LBRACE:
      case IDENTIFIER:
        statement_block();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
                                                                                                   System.out.println("statement_block -> if block");
      break;
    case WHILE:
      jj_consume_token(WHILE);
      condition();
      jj_consume_token(LBRACE);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case SQIP:
        case LBRACE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        statement_block();
      }
      jj_consume_token(RBRACE);
                                                             System.out.println("statement_block -> while block");
      break;
    case SQIP:
      jj_consume_token(SQIP);
      jj_consume_token(SEMICOLON);
                        System.out.println("statement_block -> skip");
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void statement_elem() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      expression();
      jj_consume_token(SEMICOLON);
                                    System.out.println("statement_elem -> assign");
      break;
    case LPARENT:
      jj_consume_token(LPARENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        arg_list();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(RPARENT);
      jj_consume_token(SEMICOLON);
                                                System.out.println("statement_elem -> arg_list");
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression() throws ParseException {
    expression_one();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
    case NEQUAL:
    case GREATEST:
    case GEQUAL:
    case LOWEST:
    case LEQUAL:
      expression_two();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                                       System.out.println("expression");
  }

  static final public void expression_one() throws ParseException {
    fragment();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      calcul();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
                          System.out.println("expression_one");
  }

  static final public void fragment() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
   System.out.println("[FRAGMENT]");
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPARENT:
        is_func();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
                              System.out.println("fragment -> identifier = " + t.image);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      t = jj_consume_token(IDENTIFIER);
                            System.out.println("fragment -> minus = " + t.image);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
               System.out.println("fragment -> number = " + t.image);
      break;
    case TRUE:
      jj_consume_token(TRUE);
           System.out.println("fragment -> True");
      break;
    case FALSE:
      jj_consume_token(FALSE);
            System.out.println("fragment -> false");
      break;
    case LPARENT:
      jj_consume_token(LPARENT);
      condition();
      jj_consume_token(RPARENT);
                                    System.out.println("fragment -> (condition)");
      break;
    case TILDE:
      jj_consume_token(TILDE);
      jj_consume_token(LPARENT);
      condition();
      jj_consume_token(RPARENT);
                                           System.out.println("fragment -> ~(condition)");
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void is_func() throws ParseException {
    jj_consume_token(LPARENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      arg_list();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(RPARENT);
                                   System.out.println("is_func");
  }

  static final public void calcul() throws ParseException {
    binary_op();
    expression_one();
                                 System.out.println("calcul");
  }

  static final public void binary_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
         System.out.println("binary -> plus");
      break;
    case MINUS:
      jj_consume_token(MINUS);
            System.out.println("binary -> minus");
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression_two() throws ParseException {
    comp_op();
    expression();
                           System.out.println("expression_two");
  }

  static final public void comp_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
          System.out.println("comp -> equal");
      break;
    case NEQUAL:
      jj_consume_token(NEQUAL);
             System.out.println("comp -> nequal");
      break;
    case GEQUAL:
      jj_consume_token(GEQUAL);
             System.out.println("comp -> gequal");
      break;
    case LEQUAL:
      jj_consume_token(LEQUAL);
             System.out.println("comp -> lequal");
      break;
    case GREATEST:
      jj_consume_token(GREATEST);
               System.out.println("comp -> greatest");
      break;
    case LOWEST:
      jj_consume_token(LOWEST);
             System.out.println("comp -> lowest");
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition() throws ParseException {
    condition_one();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
    case AND:
      condition_two();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
                                      System.out.println("condition");
  }

  static final public void condition_one() throws ParseException {
    expression();
               System.out.println("condition_one");
  }

  static final public void condition_two() throws ParseException {
    op();
    condition();
                     System.out.println("condition_two");
  }

  static final public void op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
       System.out.println("op -> or");
      break;
    case AND:
      jj_consume_token(AND);
          System.out.println("op -> and");
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void arg_list() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      arg_elem();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
                             System.out.println("arg_list");
  }

  static final public void arg_elem() throws ParseException {
    jj_consume_token(COMA);
    arg_list();
                     System.out.println("arg_elem");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LSAnalizerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1800,0xe000,0x1800,0xe000,0xe000,0xe000,0x0,0x1800,0x1190000,0x0,0x1800,0x1190000,0x6000,0x10000000,0x1800,0x1190000,0x1190000,0x1190000,0x1190000,0x1190000,0x0,0x4000000,0x0,0xc0000000,0x4000000,0x84c00000,0x0,0xc0000000,0x0,0x0,0x0,0x10000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x1000,0x1000,0x0,0x1000,0x0,0x0,0x0,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x2,0xfc,0x0,0x0,0x1801,0x1000,0x0,0xfc,0x300,0x300,0x0,};
   }

  /** Constructor with InputStream. */
  public LSAnalizer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LSAnalizer(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LSAnalizerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LSAnalizer(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LSAnalizerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LSAnalizer(LSAnalizerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LSAnalizerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
