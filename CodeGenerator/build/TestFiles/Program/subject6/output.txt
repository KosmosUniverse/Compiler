{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "multiply"
      },
      "return_type": "integer",
      "params": [
        {
          "type": "VariableDeclaration",
          "id": {
            "type": "Identifier",
            "name": "x"
          },
          "var_type": "integer",
          "kind": "var"
        },
        {
          "type": "VariableDeclaration",
          "id": {
            "type": "Identifier",
            "name": "y"
          },
          "var_type": "integer",
          "kind": "var"
        }
      ],
      "body": [
        {
          "type": "VariableDeclaration",
          "id": {
            "type": "Identifier",
            "name": "result"
          },
          "var_type": "integer",
          "kind": "var"
        },
        {
          "type": "VariableDeclaration",
          "id": {
            "type": "Identifier",
            "name": "minus_sign"
          },
          "var_type": "boolean",
          "kind": "var"
        },
        {
          "type": "IfStatement",
          "test": {
            "type": "LogicalExpression",
            "operator": "&&",
            "left": {
              "type": "BinaryExpression",
              "operator": "<",
              "left": {
                "type": "Identifier",
                "name": "x"
              },
              "right": {
                "type": "Literal",
                "value": 0
              }
            },
            "right": {
              "type": "BinaryExpression",
              "operator": ">=",
              "left": {
                "type": "Identifier",
                "name": "y"
              },
              "right": {
                "type": "Literal",
                "value": 0
              }
            }
          },
          "consequent": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "minus_sign"
                },
                "right": {
                  "type": "Literal",
                  "value": true
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "x"
                },
                "right": {
                  "type": "UnaryExpression",
                  "operator": "-",
                  "argument": {
                    "type": "Identifier",
                    "name": "x"
                  }
                }
              }
            }
          ],
          "alternate": [
            {
              "type": "IfStatement",
              "test": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "y"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 0
                  }
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": ">=",
                  "left": {
                    "type": "Identifier",
                    "name": "x"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 0
                  }
                }
              },
              "consequent": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "minus_sign"
                    },
                    "right": {
                      "type": "Literal",
                      "value": true
                    }
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "y"
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Identifier",
                        "name": "y"
                      }
                    }
                  }
                }
              ],
              "alternate": [
                {
                  "type": "IfStatement",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "<",
                      "left": {
                        "type": "Identifier",
                        "name": "x"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 0
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "<",
                      "left": {
                        "type": "Identifier",
                        "name": "y"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 0
                      }
                    }
                  },
                  "consequent": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "minus_sign"
                        },
                        "right": {
                          "type": "Literal",
                          "value": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "x"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "-",
                          "argument": {
                            "type": "Identifier",
                            "name": "x"
                          }
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "y"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "-",
                          "argument": {
                            "type": "Identifier",
                            "name": "y"
                          }
                        }
                      }
                    }
                  ],
                  "alternate": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "minus_sign"
                        },
                        "right": {
                          "type": "Literal",
                          "value": false
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "ExpressionStatement",
          "expression": {
            "type": "AssignmentExpression",
            "operator": "=",
            "left": {
              "type": "Identifier",
              "name": "result"
            },
            "right": {
              "type": "Literal",
              "value": 0
            }
          }
        },
        {
          "type": "WhileStatement",
          "test": {
            "type": "BinaryExpression",
            "operator": ">",
            "left": {
              "type": "Identifier",
              "name": "y"
            },
            "right": {
              "type": "Literal",
              "value": 0
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "result"
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Identifier",
                    "name": "result"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "x"
                  }
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "y"
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "-",
                  "left": {
                    "type": "Identifier",
                    "name": "y"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 1
                  }
                }
              }
            }
          ]
        },
        {
          "type": "IfStatement",
          "test": {
            "type": "BinaryExpression",
            "operator": "==",
            "left": {
              "type": "Identifier",
              "name": "minus_sign"
            },
            "right": {
              "type": "Literal",
              "value": true
            }
          },
          "consequent": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "result"
                },
                "right": {
                  "type": "UnaryExpression",
                  "operator": "-",
                  "argument": {
                    "type": "Identifier",
                    "name": "result"
                  }
                }
              }
            }
          ],
          "alternate": [
            {
              "type": "SkipStatement"
            }
          ]
        },
        {
          "type": "ReturnStatement",
          "argument": {
            "type": "Identifier",
            "name": "result"
          }
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "name": "main",
      "body": [
        {
          "type": "VariableDeclaration",
          "id": {
            "type": "Identifier",
            "name": "arg1"
          },
          "var_type": "integer",
          "kind": "var"
        },
        {
          "type": "VariableDeclaration",
          "id": {
            "type": "Identifier",
            "name": "arg2"
          },
          "var_type": "integer",
          "kind": "var"
        },
        {
          "type": "VariableDeclaration",
          "id": {
            "type": "Identifier",
            "name": "result"
          },
          "var_type": "integer",
          "kind": "var"
        },
        {
          "type": "VariableDeclaration",
          "id": {
            "type": "Identifier",
            "name": "five"
          },
          "init": {
            "type": "Literal",
            "value": 5
          },
          "var_type": "integer",
          "kind": "const"
        },
        {
          "type": "ExpressionStatement",
          "expression": {
            "type": "AssignmentExpression",
            "operator": "=",
            "left": {
              "type": "Identifier",
              "name": "arg1"
            },
            "right": {
              "type": "UnaryExpression",
              "operator": "-",
              "argument": {
                "type": "Literal",
                "value": 6
              }
            }
          }
        },
        {
          "type": "ExpressionStatement",
          "expression": {
            "type": "AssignmentExpression",
            "operator": "=",
            "left": {
              "type": "Identifier",
              "name": "arg2"
            },
            "right": {
              "type": "Identifier",
              "name": "five"
            }
          }
        },
        {
          "type": "ExpressionStatement",
          "expression": {
            "type": "AssignmentExpression",
            "operator": "=",
            "left": {
              "type": "Identifier",
              "name": "result"
            },
            "right": {
              "type": "CallExpression",
              "calee": {
                "type": "Identifier",
                "name": "multiply"
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "arg1"
                },
                {
                  "type": "Identifier",
                  "name": "arg2"
                }
              ]
            }
          }
        }
      ]
    }
  ]
}
Syntax is okay
