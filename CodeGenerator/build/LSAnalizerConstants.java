/* Generated By:JavaCC: Do not edit this line. LSAnalizerConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LSAnalizerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int VAR = 11;
  /** RegularExpression Id. */
  int CONST = 12;
  /** RegularExpression Id. */
  int INTEGER = 13;
  /** RegularExpression Id. */
  int BOOLEAN = 14;
  /** RegularExpression Id. */
  int VOID = 15;
  /** RegularExpression Id. */
  int IF = 16;
  /** RegularExpression Id. */
  int MAIN = 17;
  /** RegularExpression Id. */
  int ELSE = 18;
  /** RegularExpression Id. */
  int WHILE = 19;
  /** RegularExpression Id. */
  int SQIP = 20;
  /** RegularExpression Id. */
  int RETURN = 21;
  /** RegularExpression Id. */
  int TRUE = 22;
  /** RegularExpression Id. */
  int FALSE = 23;
  /** RegularExpression Id. */
  int LBRACE = 24;
  /** RegularExpression Id. */
  int RBRACE = 25;
  /** RegularExpression Id. */
  int LPARENT = 26;
  /** RegularExpression Id. */
  int RPARENT = 27;
  /** RegularExpression Id. */
  int COMA = 28;
  /** RegularExpression Id. */
  int SEMICOLON = 29;
  /** RegularExpression Id. */
  int PLUS = 30;
  /** RegularExpression Id. */
  int MINUS = 31;
  /** RegularExpression Id. */
  int TILDE = 32;
  /** RegularExpression Id. */
  int ASSIGN = 33;
  /** RegularExpression Id. */
  int EQUAL = 34;
  /** RegularExpression Id. */
  int NEQUAL = 35;
  /** RegularExpression Id. */
  int GREATEST = 36;
  /** RegularExpression Id. */
  int GEQUAL = 37;
  /** RegularExpression Id. */
  int LOWEST = 38;
  /** RegularExpression Id. */
  int LEQUAL = 39;
  /** RegularExpression Id. */
  int OR = 40;
  /** RegularExpression Id. */
  int AND = 41;
  /** RegularExpression Id. */
  int TPOINT = 42;
  /** RegularExpression Id. */
  int NUMBER = 43;
  /** RegularExpression Id. */
  int IDENTIFIER = 44;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 10>",
    "\"var\"",
    "\"const\"",
    "\"integer\"",
    "\"boolean\"",
    "\"void\"",
    "\"if\"",
    "\"main\"",
    "\"else\"",
    "\"while\"",
    "\"skip\"",
    "\"return\"",
    "\"true\"",
    "\"false\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\";\"",
    "\"+\"",
    "\"-\"",
    "\"~\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"||\"",
    "\"&&\"",
    "\":\"",
    "<NUMBER>",
    "<IDENTIFIER>",
  };

}
