options {
  LOOKAHEAD = 1;
  IGNORE_CASE = true;
  MULTI = true;
  VISITOR = true;
}

PARSER_BEGIN(CodeGenerator)

import java.util.ArrayList;

public class CodeGenerator {
  public static STable st = new STable();
  public static ArrayList<String> errors = new ArrayList<String>();

  public static void main(String args[]) throws ParseException {
    CodeGenerator tokens;
    if (args.length == 0) {
      System.out.println("Reading from standard input ...");
      tokens = new CodeGenerator(System.in);
    } else if (args.length == 1) {
      System.out.println("Reading from file " + args[0] + " ...");
      try {
        tokens = new CodeGenerator(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File " + args[0] + " not found.");
        return ;
      }
    } else {
      System.out.println("Usage:");
      System.out.println("	- java CodeGenerator < inputFile");
      System.out.println("	- java CodeGenerator inputFile");
      return ;
    }
    try {
      SimpleNode root = tokens.start();
      System.out.println("Java program parsed successfully.");
      PrintVisitor pv = new PrintVisitor();
      root.jjtAccept(pv, null);
      System.out.println("STACK:");
      st.printStack();
      System.out.println("\nERRORS:");
      for(int i = 0; i < errors.size(); i++)
        System.out.println(errors.get(i));
    } catch (ParseException e) {
      System.out.println("Encountered error during parse.");
    }
  }
}

PARSER_END(CodeGenerator)

TOKEN_MGR_DECLS:
{
  static int comsLevel = 0;
}

SKIP: {
  " "
  | "\t"
  | "\n" 
  | "\r"
  | "\f"
}

SKIP : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| "/*" {comsLevel++;}: COMS
}

<COMS> SKIP:
{
  "/*" {comsLevel++;}
  | "*/" {comsLevel--; if (comsLevel == 0) SwitchTo(DEFAULT);}
  | <~[]>
}

TOKEN: { //Reseved words
  <VAR: "var">
  | <CONST: "const">
  | <INTEGER: "integer">
  | <BOOLEAN: "boolean">
  | <VOID: "void">
  | <IF: "if">
  | <MAIN: "main">
  | <ELSE: "else">
  | <WHILE: "while">
  | <SQIP: "skip">
  | <RETURN: "return">
  | <TRUE: "true">
  | <FALSE: "false">
}

TOKEN: { //Symbols
  <LBRACE: "{">
  | <RBRACE: "}">
  | <LPARENT: "(">
  | <RPARENT: ")">
  | <COMA: ",">
  | <SEMICOLON: ";">
  | <PLUS: "+">
  | <MINUS: "-">
  | <TILDE: "~">
  | <ASSIGN: "=">
  | <EQUAL: "==">
  | <NEQUAL: "!=">
  | <GREATEST: ">">
  | <GEQUAL: ">=">
  | <LOWEST: "<">
  | <LEQUAL: "<=">
  | <OR: "||">
  | <AND: "&&">
  | <TPOINT:":">
}

TOKEN: { // Usable
  <NUMBER: "0" | ["1"-"9"] (["0"-"9"])* | "-"["1"-"9"] (["0"-"9"])*>
  | <IDENTIFIER: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9","_"])*>
}

SimpleNode start() : {}
{
  ([decl_list()] [function_list()] main()<EOF>) {return jjtThis;}
}

void decl_list() #void : {}
{
  (decl()<SEMICOLON> [decl_list() #decl_list(2)])
}

void decl() : {}
{
  var_decl()
  | const_decl()
}

void var_decl() : {Token t; String type;}
{
  (<VAR>t = <IDENTIFIER><TPOINT>type = type()) {jjtThis.value = t.image; st.addElem(t.image, type, false, false);}
}

void const_decl() : {Token t; String type;}
{
  (<CONST>t = <IDENTIFIER><TPOINT>type = type()<ASSIGN>expression()) {jjtThis.value = t.image; st.addElem(t.image, type, true, false);}
}

void function_list() : {}
{
  (function() [function_list()])
  | (function_void() [function_list()])
}

void function() : {Token t; String type;}
{
  (type = type()t = <IDENTIFIER> {st.addElem(t.image, type, false, true); st.addBreak();} <LPARENT>[parameter_list()]<RPARENT><LBRACE>[decl_list()][statement_block()]<RETURN><LPARENT>expression()<RPARENT><SEMICOLON><RBRACE>) {jjtThis.value = t.image; st.removeUntilBreak();}
}

void function_void() : {Token t;}
{
  (<VOID>t = <IDENTIFIER> {st.addElem(t.image, "void", false, true); st.addBreak();} <LPARENT>[parameter_list()]<RPARENT><LBRACE>[decl_list()][statement_block()]<RETURN><LPARENT><RPARENT><SEMICOLON><RBRACE>) {jjtThis.value = t.image; st.removeUntilBreak();}
}

String type() : {Token t;}
{
  t = <INTEGER> {jjtThis.value = t.image; return t.image;}
  | t = <BOOLEAN> {jjtThis.value = t.image; return t.image;}
}

void parameter_list() : {Token t;}
{
  (t = <IDENTIFIER><TPOINT>type()[<COMA>parameter_list()]) {jjtThis.value = t.image;}
}

void main() : {}
{
  (<MAIN> {st.addElem("main", "void", false, true); st.addBreak();} <LBRACE>[decl_list()][statement_block()]<RBRACE>) {st.removeUntilBreak();}
}

void statement_block() : {Token t;}
{
  (t = <IDENTIFIER>statement_elem(t.image)[statement_block()]) {jjtThis.value = t.image;}
  | (<LBRACE>statement_block()<RBRACE>[statement_block()]){jjtThis.value = "{Statement_block}";}
  | (t = <IF>condition()<LBRACE>[statement_block()]<RBRACE><ELSE><LBRACE>[statement_block()]<RBRACE>[statement_block()]){jjtThis.value = t.image;}
  | (t = <WHILE>condition()<LBRACE>[statement_block()]<RBRACE>[statement_block()]){jjtThis.value = t.image;}
  | (t = <SQIP><SEMICOLON>[statement_block()]){jjtThis.value = t.image;}
}

void statement_elem(String name) #void : {}
{
  (<ASSIGN>expression()<SEMICOLON>) #assign(1)
  | (<LPARENT>[arg_list()]<RPARENT><SEMICOLON>) #funcarg(1) {st.checkElem(name, true, errors);}
}

void expression() : {}
{
  (expression_one() [expression_two()])
}

void expression_one() : {}
{
  (fragment() [calcul()])
}

void fragment() : {Token t;}
{
  (t = <IDENTIFIER>[is_func()]) {jjtThis.value = t.image;}
  | (<MINUS>t = <IDENTIFIER>) {jjtThis.value = "-" + t.image;}
  | t = <NUMBER> {jjtThis.value = t.image;}
  | t = <TRUE> {jjtThis.value = t.image;}
  | t = <FALSE> {jjtThis.value = t.image;}
  | (<LPARENT>condition()<RPARENT>) {jjtThis.value = "";}
}

void is_func() : {}
{
  (<LPARENT>[arg_list()]<RPARENT>)
}

void calcul() : {}
{
  (binary_op() expression_one())
}

void binary_op() : {Token t;}
{
  t = <PLUS> {jjtThis.value = t.image;}
  | t = <MINUS> {jjtThis.value = t.image;}
}

void expression_two() : {}
{
  (comp_op() expression())
}

void comp_op() : {Token t;}
{
  t = <EQUAL> {jjtThis.value = t.image;}
  | t = <NEQUAL> {jjtThis.value = t.image;}
  | t = <GEQUAL> {jjtThis.value = t.image;}
  | t = <LEQUAL> {jjtThis.value = t.image;}
  | t = <GREATEST> {jjtThis.value = t.image;}
  | t = <LOWEST> {jjtThis.value = t.image;}
}

void condition() : {}
{
  (condition_one() [condition_two()])
}

void condition_one() #void : {}
{
  (<TILDE><LPARENT>condition()<RPARENT>) #tildecond(1)
  | expression() #condexpr(1)
}

void condition_two() : {}
{
  (op() condition())
}

void op() : {Token t;}
{
  t = <OR> {jjtThis.value = t.image;}
  | t = <AND> {jjtThis.value = t.image;}
}

void arg_list() : {Token t;}
{
  (t = <IDENTIFIER>[<COMA>arg_list()]) {jjtThis.value = t.image;}
}