/*
 * Empty for now
 */


options {
  LOOKAHEAD = 1;
  IGNORE_CASE = true;
  MULTI = true;
  VISITOR = true;
}

PARSER_BEGIN(CodeGenerator)

public class CodeGenerator {
  public static void main(String args[]) throws ParseException {
    CodeGenerator tokens;
    if (args.length == 0) {
      System.out.println("Reading from standard input ...");
      tokens = new CodeGenerator(System.in);
    } else if (args.length == 1) {
      System.out.println("Reading from file " + args[0] + " ...");
      try {
        tokens = new CodeGenerator(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File " + args[0] + " not found.");
        return ;
      }
    } else {
      System.out.println("Usage:");
      System.out.println("	- java CodeGenerator < inputFile");
      System.out.println("	- java CodeGenerator inputFile");
      return ;
    }
    try {
      tokens.start();
      System.out.println("Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println("Encountered error during parse.");
    }
  }
}

PARSER_END(CodeGenerator)

SKIP: {
  " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN: { //Reseved words
  <VAR: "var">
  | <CONST: "const">
  | <INTEGER: "integer">
  | <BOOLEAN: "boolean">
  | <VOID: "void">
  | <IF: "if">
  | <MAIN: "main">
  | <ELSE: "else">
  | <WHILE: "while">
  | <SQIP: "skip">
  | <RETURN: "return">
  | <TRUE: "true">
  | <FALSE: "false">
}

TOKEN: { //Symbols
  <LBRACE: "{">
  | <RBRACE: "}">
  | <LPARENT: "(">
  | <RPARENT: ")">
  | <COMA: ",">
  | <SEMICOLON: ";">
  | <PLUS: "+">
  | <MINUS: "-">
  | <TILDE: "~">
  | <ASSIGN: "=">
  | <EQUAL: "==">
  | <NEQUAL: "!=">
  | <GREATEST: ">">
  | <GEQUAL: ">=">
  | <LOWEST: "<">
  | <LEQUAL: "<=">
  | <OR: "||">
  | <AND: "&&">
  | <TPOINT:":">
}

TOKEN: { // Usable
  <NUMBER: ["1"-"9"] (["0"-"9"])* | "-"["1"-"9"] (["0"-"9"])*>
  | <IDENTIFIER: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9","_"])*>
}

void start() : {}
{
  ([decl_list()] [function_list()] main()<EOF>)
}

void decl_list() : {}
{
  (decl()<SEMICOLON> [decl_list()])
}

void decl() : {}
{
  var_decl()
  | const_decl()
}

void var_decl() : {}
{
  (<VAR><IDENTIFIER><TPOINT>type())
}

void const_decl() : {}
{
  (<CONST><IDENTIFIER><TPOINT>type()<ASSIGN>expression())
}

void function_list() : {}
{
  (function()[function_list()])
  | (function_void() [function_list()])
}

void function() : {}
{
  (type()<IDENTIFIER><LPARENT>[parameter_list()]<RPARENT><LBRACE>[decl_list()][statement_block()]<RETURN><LPARENT>expression()<RPARENT><RBRACE>)
}

void function_void() : {}
{
  (<VOID><IDENTIFIER><LPARENT>[parameter_list()]<RPARENT><LBRACE>[decl_list()][statement_block()]<RETURN><LPARENT><RPARENT><RBRACE>)
}

void type() #void : {}
{
  <INTEGER> #type_integer(1)
  | <BOOLEAN> #type_boolean(1)
}

void parameter_list() : {}
{
  (<IDENTIFIER><TPOINT>type()[<COMA>parameter_list()])
}

void main() : {}
{
  (<MAIN><LBRACE>[decl_list()][statement_block()]<RBRACE>)
}

void statement_block() #void : {}
{
  (<IDENTIFIER>statement_elem()) #stmt_id(1)
  | (<LBRACE>statement_block()<RBRACE>) #stmt_stmt(1)
  | (<IF>condition()<LBRACE>[statement_block()]<RBRACE><ELSE><LBRACE>[statement_block()]<RBRACE>) #stmt_if(1)
  | (<WHILE>condition()<LBRACE>[statement_block()]<RBRACE>) #stmt_while(1)
  | (<SQIP><SEMICOLON>) #stmt_skip(1)
}

void statement_elem() #void : {}
{
  (<ASSIGN>expression()<SEMICOLON>) #selem_assign(1)
  | (<LPARENT>[arg_list()]<RPARENT><SEMICOLON>) #selem_func(1)
}

void expression() : {}
{
  (expression_one()[expression_two()])
}

void expression_one() : {}
{
  (fragment() [calcul()])
}

void fragment() #void : {}
{
  (<IDENTIFIER>[is_func()]) #frag_id(1)
  | (<MINUS><IDENTIFIER>) #frag_minus(1)
  | <NUMBER> #frag_number(1)
  | <TRUE> #frag_true(1)
  | <FALSE> #frag_false(1)
  | (<LPARENT>condition()<RPARENT>) #frag_condition(1)
}

void is_func() : {}
{
  (<LPARENT>[arg_list()]<RPARENT>)
}

void calcul() : {}
{
  (binary_op() expression_one())
}

void binary_op() #void : {}
{
  <PLUS> #bin_plus(1)
  | <MINUS> #bin_minus(1)
}

void expression_two() : {}
{
  (comp_op() expression())
}

void comp_op() #void : {}
{
  <EQUAL> #comp_equal(1)
  | <NEQUAL> #comp_nequal(1)
  | <GEQUAL> #comp_gequal(1)
  | <LEQUAL> #comp_lequal(1)
  | <GREATEST> #comp_great(1)
  | <LOWEST> #comp_low(1)
}

void condition() : {}
{
  (condition_one() [condition_two()])
}

void condition_one() #void : {}
{
  (<TILDE><LPARENT>condition()<RPARENT>) #cond_tilde(1)
  | expression() #cond_expr(1)
}

void condition_two() : {}
{
  (op() condition())
}

void op() #void : {}
{
  <OR> #op_or(1)
  | <AND> #op_and(1)
}

void arg_list() : {}
{
  (<IDENTIFIER>[arg_elem()])
}

void arg_elem() : {}
{
  (<COMA>arg_list())
}
