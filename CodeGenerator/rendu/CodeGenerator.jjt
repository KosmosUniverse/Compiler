/*
 * Empty for now
 */


options {
  LOOKAHEAD = 1;
  IGNORE_CASE = true;
  MULTI = true;
  VISITOR = true;
}

PARSER_BEGIN(CodeGenerator)

public class CodeGenerator {
  public static void main(String args[]) throws ParseException {
    CodeGenerator tokens;
    if (args.length == 0) {
      System.out.println("Reading from standard input ...");
      tokens = new CodeGenerator(System.in);
    } else if (args.length == 1) {
      System.out.println("Reading from file " + args[0] + " ...");
      try {
        tokens = new CodeGenerator(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File " + args[0] + " not found.");
        return ;
      }
    } else {
      System.out.println("Usage:");
      System.out.println("	- java CodeGenerator < inputFile");
      System.out.println("	- java CodeGenerator inputFile");
      return ;
    }
    try {
      SimpleNode root = tokens.start();
      System.out.println("Java program parsed successfully.");

      Print p = new Print();
      root.jjtAccept(p, null);
    } catch (ParseException e) {
      System.out.println("Encountered error during parse.");
    }
  }
}

PARSER_END(CodeGenerator)

TOKEN_MGR_DECLS :
{
  static int commentLevel = 0;
}

SKIP: {
  " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}

SKIP: /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| "/*" {commentLevel++;}: COMMENTS
}

<COMMENTS> SKIP:
{
  "/*" {commentLevel++;}
  | "*/" {commentLevel--; if (commentLevel == 0) SwitchTo(DEFAULT);}
  | <~[]>
}

TOKEN: { //Reseved words
  <VAR: "var">
  | <CONST: "const">
  | <INTEGER: "integer">
  | <BOOLEAN: "boolean">
  | <VOID: "void">
  | <IF: "if">
  | <MAIN: "main">
  | <ELSE: "else">
  | <WHILE: "while">
  | <SQIP: "skip">
  | <RETURN: "return">
  | <TRUE: "true">
  | <FALSE: "false">
}

TOKEN: { //Symbols
  <LBRACE: "{">
  | <RBRACE: "}">
  | <LPARENT: "(">
  | <RPARENT: ")">
  | <COMA: ",">
  | <SEMICOLON: ";">
  | <PLUS: "+">
  | <MINUS: "-">
  | <TILDE: "~">
  | <ASSIGN: "=">
  | <EQUAL: "==">
  | <NEQUAL: "!=">
  | <GREATEST: ">">
  | <GEQUAL: ">=">
  | <LOWEST: "<">
  | <LEQUAL: "<=">
  | <OR: "||">
  | <AND: "&&">
  | <TPOINT:":">
}

TOKEN: { // Usable
  <NUMBER: ["1"-"9"] (["0"-"9"])* | "-"["1"-"9"] (["0"-"9"])*>
  | <IDENTIFIER: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9","_"])*>
}

SimpleNode start() : {String res; String decl; String func; String main;}
{
  ({res = "";} [decl = decl_list() {res += decl;}] [func = function_list() {res += func;}] main = mymain()<EOF>) {res += main; jjtThis.value = res; return jjtThis;}
}

String decl_list() : {String decl2; String res;}
{
  (res = decl()<SEMICOLON> [decl2 = decl_list() {res+= ";" + decl2;}]) {return res;}
}

String decl() : {String s;}
{
  s = var_decl() {return s;}
  | s = const_decl() {return s;}
}

String var_decl() : {Token id; String type; String res;}
{
  (<VAR> id = <IDENTIFIER><TPOINT> type = type()) {res = id.image + " " + type; return res;}
}

String const_decl() : {Token id; String type; String expr; String res;}
{
  (<CONST> id = <IDENTIFIER><TPOINT>  type = type()<ASSIGN> expr = expression()) {res = id.image + " " + type + "=" + expr; return res;}
}

String function_list() : {String func; String res;}
{
  (res = function()[func = function_list() {res += func;}]) {return res;}
  | (res = function_void() [func = function_list() {res += func;}]) {return res;}
}

String function() : {Token id; String param; String decl; String state; String expr; String res;}
{
  (res = type() id = <IDENTIFIER> {res += " " + id.image + "(";} <LPARENT>[param = parameter_list() {res += param;}]<RPARENT><LBRACE> {res += ")\n{\n";} [decl = decl_list() {res += decl + "\n;";}][state = statement_block() {res += state + "\n";}]<RETURN><LPARENT> expr = expression()<RPARENT><RBRACE>) {res += "return (" + expr + ")\n}\n"; return res;}
}

String function_void() : {Token id; String param; String decl; String state; String res;}
{
  (<VOID> id = <IDENTIFIER> {res = "void " + id.image + "(";} <LPARENT>[param = parameter_list() {res += param;}]<RPARENT><LBRACE> {res += ")\n{\n";} [decl = decl_list() {res += decl + "\n;";}][state = statement_block() {res += state + "\n";}]<RETURN><LPARENT><RPARENT><RBRACE>) {res += "return ()\n}\n"; return res;}
}

String type() #void : {Token t;}
{
  t = <INTEGER> {return t.image;} #type_integer(1)
  | t = <BOOLEAN> {return t.image;} #type_boolean(1)
}

String parameter_list() : {Token id; String type; String res; String param;}
{
  (id = <IDENTIFIER><TPOINT>type = type() {res = id.image + " " + type;} [<COMA>param = parameter_list() {res += ", " + param;}]) {return res;}
}

String mymain() : {String decl; String state; String res;}
{
  ({res = "main\n{\n";} <MAIN><LBRACE>[decl = decl_list() {res += decl + "\n";}][state = statement_block() {res += state + "\n";}]<RBRACE>) {res += "}\n"; return res;}
}

String statement_block() #void : {Token t; String elem; String elem2; String elem3; String res;}
{
  (t = <IDENTIFIER>elem = statement_elem()) {res = t.image + elem; return res;} #stmt_id(1)
  | (<LBRACE>elem = statement_block()<RBRACE>) {res = "{\n" + elem + "\n}\n"; return res;} #stmt_stmt(1)
  | (<IF>elem = condition()<LBRACE> {res = "if " + elem + "{\n";} [elem2 = statement_block() {res += elem2;}]<RBRACE><ELSE><LBRACE> {res += "\n} else {\n";} [elem3 = statement_block() {res += elem3;}]<RBRACE>) {res += "\n}"; return res;} #stmt_if(1)
  | (<WHILE>elem = condition()<LBRACE> {res = "while " + elem + "\n{\n";} [elem2 = statement_block() {res += elem2;}]<RBRACE>) {res += "\n}"; return res;} #stmt_while(1)
  | (<SQIP><SEMICOLON>) {res = "skip;"; return res;} #stmt_skip(1)
}

String statement_elem() #void : {String res; String elem;}
{
  (<ASSIGN>elem = expression()<SEMICOLON>) {res = " = " + elem + ";"; return res;} #selem_assign(1)
  | (<LPARENT>  {res = "(";} [elem = arg_list() {res += elem;}]<RPARENT><SEMICOLON>) {res += ");"; return res;} #selem_func(1)
}

String expression() : {String one; String two; String res;}
{
  (one = expression_one() {res = one;} [two = expression_two() {res += two;} ]) {return res;}
}

String expression_one() : {String frag; String calc; String res;}
{
  (frag = fragment() {res = frag;} [calc = calcul() {res += calc;}]) {return res;}
}

String fragment() #void : {Token t; String cond; String res;}
{
  (t = <IDENTIFIER> {res = t.image;} [cond = is_func() {res += cond;}]) {return res;} #frag_id(1)
  | (<MINUS> t = <IDENTIFIER>) {res = "-" + t.image; return res;} #frag_minus(1)
  | t = <NUMBER> {return t.image;} #frag_number(1)
  | t = <TRUE> {return t.image;} #frag_true(1)
  | t = <FALSE> {return t.image;} #frag_false(1)
  | (<LPARENT>cond = condition()<RPARENT>) {res = "(" + cond + ")"; return res;} #frag_condition(1)
}

String is_func() : {String res; String elem;}
{
  (<LPARENT> {res = "(";} [elem = arg_list() {res += elem;}]<RPARENT>) {res += ")"; return res;}
}

String calcul() : {String bin; String expr;}
{
  (bin = binary_op() expr = expression_one()) {return (bin + " " + expr);}
}

String binary_op() #void : {Token t;}
{
  t = <PLUS> {return t.image;} #bin_plus(1)
  | t = <MINUS> {return t.image;} #bin_minus(1)
}

String expression_two() : {String comp; String expr;}
{
  (comp = comp_op() expr = expression()) {return (comp + " " + expr);}
}

String comp_op() #void : {Token t;}
{
  t = <EQUAL> {return t.image;} #comp_equal(1)
  | t = <NEQUAL> {return t.image;} #comp_nequal(1)
  | t = <GEQUAL> {return t.image;} #comp_gequal(1)
  | t = <LEQUAL> {return t.image;} #comp_lequal(1)
  | t = <GREATEST> {return t.image;} #comp_great(1)
  | t = <LOWEST> {return t.image;} #comp_low(1)
}

String condition() : {String one; String two; String res;}
{
  (one = condition_one() {res = one;} [two = condition_two() {res += two;} ]) {return res;}
}

String condition_one() #void : {String expr;}
{
  (<TILDE><LPARENT> expr = condition()<RPARENT>) {return ("~(" + expr + ")");} #cond_tilde(1)
  | expr = expression() {return expr;} #cond_expr(1)
}

String condition_two() : {String op; String cond;}
{
  (op = op() cond = condition()) {return (op + " " + cond);}
}

String op() #void : {Token t;}
{
  t = <OR> {return t.image;} #op_or(1)
  | t = <AND> {return t.image;} #op_and(1)
}

String arg_list() #void : {Token t; String res; String elem;}
{
  (t = <IDENTIFIER> {res = t.image;} [<COMA> elem = arg_list() {res += ", " + elem;} #args(2)]) {return res;}
}